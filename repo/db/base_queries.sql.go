// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: base_queries.sql

package db

import (
	"context"
)

const alreadySynced = `-- name: AlreadySynced :one
SELECT 
    session_id
FROM slack_synced_messages
WHERE
    session_id = ?
`

func (q *Queries) AlreadySynced(ctx context.Context, sessionID string) (string, error) {
	row := q.db.QueryRowContext(ctx, alreadySynced, sessionID)
	var session_id string
	err := row.Scan(&session_id)
	return session_id, err
}

const deleteAllSessions = `-- name: DeleteAllSessions :exec
DELETE FROM sessions
`

func (q *Queries) DeleteAllSessions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllSessions)
	return err
}

const getLastSlackUpdate = `-- name: GetLastSlackUpdate :one
SELECT 
    last_update
FROM last_slack_update
LIMIT 1
`

func (q *Queries) GetLastSlackUpdate(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, getLastSlackUpdate)
	var last_update string
	err := row.Scan(&last_update)
	return last_update, err
}

const getSessionIds = `-- name: GetSessionIds :many
SELECT
    id
FROM sessions
WHERE
    (COALESCE(?1, '') = '' OR ip = ?1 OR ip IS NULL)
    AND (COALESCE(?2, '') = '' OR starttime < ?2)
    AND (COALESCE(?3, '') = '' OR starttime > ?3)
ORDER BY idx ASC
LIMIT COALESCE(?5, -1) OFFSET COALESCE(?4, 0)
`

type GetSessionIdsParams struct {
	Ip          interface{}
	StartTimeLt interface{}
	StartTimeGt interface{}
	Offset      interface{}
	Limit       interface{}
}

func (q *Queries) GetSessionIds(ctx context.Context, arg GetSessionIdsParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getSessionIds,
		arg.Ip,
		arg.StartTimeLt,
		arg.StartTimeGt,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSession = `-- name: InsertSession :one
INSERT INTO 
    sessions (id, starttime, ip) 
VALUES 
    (?, ?, ?)
RETURNING 
    id
`

type InsertSessionParams struct {
	ID        string
	Starttime string
	Ip        string
}

func (q *Queries) InsertSession(ctx context.Context, arg InsertSessionParams) (string, error) {
	row := q.db.QueryRowContext(ctx, insertSession, arg.ID, arg.Starttime, arg.Ip)
	var id string
	err := row.Scan(&id)
	return id, err
}

const insertSyncedMessage = `-- name: InsertSyncedMessage :exec
INSERT INTO 
    slack_synced_messages (session_id)
VALUES 
    (?)
`

func (q *Queries) InsertSyncedMessage(ctx context.Context, sessionID string) error {
	_, err := q.db.ExecContext(ctx, insertSyncedMessage, sessionID)
	return err
}

const sessionExists = `-- name: SessionExists :one
SELECT 
    id
FROM sessions
WHERE
    id = ?
`

func (q *Queries) SessionExists(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, sessionExists, id)
	err := row.Scan(&id)
	return id, err
}

const updateLastSlackUpdate = `-- name: UpdateLastSlackUpdate :one
INSERT OR REPLACE INTO 
    last_slack_update (id, last_update)
VALUES 
    (1, ?)
RETURNING
    last_update
`

func (q *Queries) UpdateLastSlackUpdate(ctx context.Context, lastUpdate string) (string, error) {
	row := q.db.QueryRowContext(ctx, updateLastSlackUpdate, lastUpdate)
	var last_update string
	err := row.Scan(&last_update)
	return last_update, err
}
